/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/status": {
    /** Status */
    get: operations["swiftink_api_api_status"];
  };
  "/transcripts/upload": {
    /** Generate Presigned Url */
    post: operations["swiftink_api_routers_transcript_transcript_router_generate_presigned_url"];
  };
  "/transcripts/": {
    /**
     * Get Transcripts
     * @description Get all transcripts for the current user
     */
    get: operations["swiftink_api_routers_transcript_transcript_router_get_transcripts"];
    /** Create Transcription */
    post: operations["swiftink_api_routers_transcript_transcript_router_create_transcription"];
  };
  "/transcripts/{id}/validate": {
    /**
     * Get Transcript Validate
     * @description Get the details of a specific transcript by id
     */
    get: operations["swiftink_api_routers_transcript_transcript_router_get_transcript_validate"];
  };
  "/transcripts/{id}": {
    /**
     * Get Transcript Details
     * @description Get the details of a specific transcript by id
     */
    get: operations["swiftink_api_routers_transcript_transcript_router_get_transcript_details"];
    /**
     * Update Transcript
     * @description Update a transcript by id
     */
    put: operations["swiftink_api_routers_transcript_transcript_router_update_transcript"];
    /**
     * Delete Transcript
     * @description Delete a transcript by id
     */
    delete: operations["swiftink_api_routers_transcript_transcript_router_delete_transcript"];
  };
  "/transcripts/{id}/txt": {
    /**
     * Get Transcript Txt
     * @description Get the text of a transcript and return as a .txt file
     */
    get: operations["swiftink_api_routers_transcript_transcript_router_get_transcript_txt"];
  };
  "/transcripts/{id}/srt": {
    /**
     * Get Transcript Srt
     * @description Get the text of a transcript and return as a .srt file
     */
    get: operations["swiftink_api_routers_transcript_transcript_router_get_transcript_srt"];
  };
  "/transcripts/{id}/vtt": {
    /**
     * Get Transcript Vtt
     * @description Get the text of a transcript and return as a .vtt file
     */
    get: operations["swiftink_api_routers_transcript_transcript_router_get_transcript_vtt"];
  };
  "/apikeys/": {
    /**
     * Get Apikeys
     * @description Get all APIKeys for the current user
     */
    get: operations["swiftink_api_routers_apikey_apikey_router_get_apikeys"];
    /**
     * Create Apikey
     * @description Create a new APIKey for the current user
     */
    post: operations["swiftink_api_routers_apikey_apikey_router_create_apikey"];
  };
  "/apikeys/{id}": {
    /**
     * Get Apikey Details
     * @description Get details of an APIKey by ID
     */
    get: operations["swiftink_api_routers_apikey_apikey_router_get_apikey_details"];
    /**
     * Update Apikey
     * @description Update details of an APIKey by ID, such as name
     */
    put: operations["swiftink_api_routers_apikey_apikey_router_update_apikey"];
    /**
     * Delete Apikey
     * @description Delete an APIKey by ID
     */
    delete: operations["swiftink_api_routers_apikey_apikey_router_delete_apikey"];
  };
  "/stripe/create_checkout_session": {
    /**
     * Create Checkout Session
     * @description Create a checkout session for the current user
     */
    post: operations["swiftink_api_routers_stripe_stripe_router_create_checkout_session"];
  };
  "/stripe/create_portal_session": {
    /**
     * Create Portal Session
     * @description Create a portal session for the current user to manage their billing details
     */
    post: operations["swiftink_api_routers_stripe_stripe_router_create_portal_session"];
  };
  "/users/me": {
    /**
     * Me
     * @description Get the current user's profile
     */
    get: operations["swiftink_api_routers_user_user_router_me"];
    /**
     * Update Me
     * @description Update the current user's profile name
     */
    put: operations["swiftink_api_routers_user_user_router_update_me"];
    /**
     * Create Me
     * @description Create the user and profile within Supabase
     */
    post: operations["swiftink_api_routers_user_user_router_create_me"];
    /**
     * Delete Me
     * @description Delete the current user's profile and cancel all subscriptions
     */
    delete: operations["swiftink_api_routers_user_user_router_delete_me"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * GeneratePresignedResponse
     * @description Response for uploading a file
     */
    GeneratePresignedResponse: {
      /**
       * Url
       * Format: uri
       * @description The URL to POST the file to
       */
      url: string;
      /**
       * Filename
       * @description The filename to use for the file
       */
      filename: string;
    };
    /** TimestampedTextSegment */
    TimestampedTextSegment: {
      /**
       * Start
       * @description Start time of the segment in seconds
       * @example 0
       */
      start: number;
      /**
       * End
       * @description End time of the segment in seconds
       * @example 1
       */
      end: number;
      /**
       * Text
       * @description Text of the segment
       * @example Hello World
       */
      text: string;
    };
    /**
     * TranscriptStatus
     * @description Transcript status
     * @enum {string}
     */
    TranscriptStatus:
      | "pending"
      | "uploaded"
      | "validating"
      | "validated"
      | "transcribing"
      | "transcribed"
      | "complete"
      | "validation_failed"
      | "failed";
    /**
     * TranscriptRating
     * @description An enumeration.
     * @enum {string}
     */
    TranscriptRating: "none" | "positive" | "negative";
    /**
     * TranscriptLanguage
     * @description ISO 639-1 language codes
     * @enum {string}
     */
    TranscriptLanguage:
      | "af"
      | "am"
      | "ar"
      | "as"
      | "az"
      | "ba"
      | "be"
      | "bg"
      | "bn"
      | "bo"
      | "br"
      | "bs"
      | "ca"
      | "cs"
      | "cy"
      | "da"
      | "de"
      | "el"
      | "en"
      | "es"
      | "et"
      | "eu"
      | "fa"
      | "fi"
      | "fo"
      | "fr"
      | "gl"
      | "gu"
      | "ha"
      | "haw"
      | "hi"
      | "hr"
      | "ht"
      | "hu"
      | "hy"
      | "id"
      | "is"
      | "it"
      | "iw"
      | "ja"
      | "jw"
      | "ka"
      | "kk"
      | "km"
      | "kn"
      | "ko"
      | "la"
      | "lb"
      | "ln"
      | "lo"
      | "lt"
      | "lv"
      | "mg"
      | "mi"
      | "mk"
      | "ml"
      | "mn"
      | "mr"
      | "ms"
      | "mt"
      | "my"
      | "ne"
      | "nl"
      | "nn"
      | "no"
      | "oc"
      | "pa"
      | "pl"
      | "ps"
      | "pt"
      | "ro"
      | "ru"
      | "sa"
      | "sd"
      | "si"
      | "sk"
      | "sl"
      | "sn"
      | "so"
      | "sq"
      | "sr"
      | "su"
      | "sv"
      | "sw"
      | "ta"
      | "te"
      | "tg"
      | "th"
      | "tk"
      | "tl"
      | "tr"
      | "tt"
      | "uk"
      | "ur"
      | "uz"
      | "vi"
      | "yi"
      | "yo"
      | "zh";
    /** WebhookSchema */
    WebhookSchema: {
      /**
       * Url
       * @description The URL to POST the JSON transcript to on completion
       */
      url: string;
    };
    /** TranscriptSchema */
    TranscriptSchema: {
      /**
       * Id
       * Format: uuid
       * @description Unique ID for the transcript
       */
      id?: string;
      /**
       * Created
       * Format: date-time
       * @description Time the transcript was created
       */
      created: string;
      /**
       * Updated
       * Format: date-time
       * @description Time the transcript was last updated
       */
      updated: string;
      /**
       * Name
       * @description Name of the transcript
       */
      name?: string;
      /**
       * Validated
       * @description Whether the file has been validated
       * @default false
       */
      validated?: boolean;
      /**
       * Transcribed
       * @description Whether the file has been transcribed
       * @default false
       */
      transcribed?: boolean;
      /**
       * Context
       * @description Transcript context, elaborate on the setting, content, speakers, etc. The model will only consider the last 224 tokens of the string if what's provided is longer.
       */
      context?: string;
      /**
       * Translate
       * @description Whether to translate the transcript to English
       * @default false
       */
      translate?: boolean;
      /**
       * Url
       * @description URL of the file
       * @default https://example.com
       */
      url?: string;
      /**
       * File Mimetype
       * @description Mimetype of file
       */
      file_mimetype?: string;
      /**
       * Duration Seconds
       * @description Duration of the file in seconds
       */
      duration_seconds?: number;
      /**
       * Text Segments
       * @description List of text segments with timestamps
       */
      text_segments: components["schemas"]["TimestampedTextSegment"][];
      /**
       * Text
       * @description Transcript text
       */
      text?: string;
      /**
       * Heading Segments
       * @description An outline of the transcript in the form of timestamped headings
       */
      heading_segments: components["schemas"]["TimestampedTextSegment"][];
      /**
       * Summary
       * @description Transcript summary
       */
      summary?: string;
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
      /** @description Transcript status */
      status: components["schemas"]["TranscriptStatus"];
      /** @description Transcript rating */
      rating: components["schemas"]["TranscriptRating"];
      /** @description Detected language of the transcript in standard ISO 639-1 */
      language: components["schemas"]["TranscriptLanguage"];
      /**
       * Webhooks
       * @description List of webhooks hit with POST on completion of the transcript
       */
      webhooks: components["schemas"]["WebhookSchema"][];
      /**
       * Keywords
       * @description List of keywords generated from the transcript
       */
      keywords: string[];
    };
    /** CreateTranscriptionRequest */
    CreateTranscriptionRequest: {
      /**
       * Name
       * @description The name of the transcription
       * @example David Attenborough - Planet Earth II - Episode 1 - The Beasts of the Southern Wild
       */
      name?: string;
      /**
       * Url
       * Format: uri
       * @description The url of the audio file to be transcribed.
       * @example https://storage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4
       */
      url: string;
      /**
       * Do Async
       * @description Whether or not to run the transcription asynchronously
       * @default true
       */
      do_async?: boolean;
      /**
       * Webhooks
       * @description Webhooks to be called to update on the status of the transcription
       */
      webhooks?: components["schemas"]["WebhookSchema"][];
      /**
       * Context
       * @description Context to be used for the transcription
       */
      context?: string;
      /**
       * @description The language of the transcription. If this is not provided, the language will be detected automatically
       * @example fa
       */
      language?: components["schemas"]["TranscriptLanguage"];
    };
    /** UpdateTranscriptRequest */
    UpdateTranscriptRequest: {
      /**
       * Name
       * @description The name of the transcript
       * @example David Attenborough - Planet Earth II - Episode 1 - The Beasts of the Southern Wild
       */
      name?: string;
      /**
       * @description The rating of the transcript, positive or negative
       * @example positive
       */
      rating?: components["schemas"]["TranscriptRating"];
    };
    /** APIKeySchema */
    APIKeySchema: {
      /**
       * Id
       * @description The API Key's unique id
       */
      id?: string;
      /**
       * Name
       * @description The API Key's name, user defined
       * @default API Key
       */
      name?: string;
      /**
       * Created
       * Format: date-time
       * @description Time the record was created
       */
      created: string;
      /**
       * Updated
       * Format: date-time
       * @description Time the record was last updated
       */
      updated: string;
      /**
       * Secret
       * @description The API key's secret. Only returned when creating a new API key.
       */
      secret?: string;
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
    };
    /** CreateAPIKeyResponse */
    CreateAPIKeyResponse: {
      /**
       * Id
       * @description The API Key's unique id
       */
      id?: string;
      /**
       * Name
       * @description The API Key's name, user defined
       * @default API Key
       */
      name?: string;
      /**
       * Created
       * Format: date-time
       * @description Time the record was created
       */
      created: string;
      /**
       * Updated
       * Format: date-time
       * @description Time the record was last updated
       */
      updated: string;
      /**
       * Secret
       * @description The secret key string to use in plugins and HTTP headers for Swiftink authentication
       */
      secret: string;
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
    };
    /** UpdateAPIKeyRequest */
    UpdateAPIKeyRequest: {
      /**
       * Name
       * @description The name of the API Key
       */
      name?: string;
    };
    /** CreateCheckoutSessionResponse */
    CreateCheckoutSessionResponse: {
      /**
       * Url
       * @description The url to redirect the user to to complete the checkout process
       */
      url: string;
    };
    /**
     * PriceOptions
     * @description An enumeration.
     * @enum {string}
     */
    PriceOptions:
      | "individual_monthly"
      | "individual_yearly"
      | "professional_monthly"
      | "professional_yearly"
      | "business_monthly"
      | "business_yearly";
    /** CreateCheckoutSessionRequest */
    CreateCheckoutSessionRequest: {
      /** @description The price to create a checkout session for */
      price: components["schemas"]["PriceOptions"];
    };
    /** CreatePortalSessionResponse */
    CreatePortalSessionResponse: {
      /**
       * Url
       * @description The url to redirect the user to to manage their account
       */
      url: string;
    };
    /**
     * SwiftinkSubscriptionTiers
     * @description An enumeration.
     * @enum {string}
     */
    SwiftinkSubscriptionTiers: "free" | "individual" | "professional" | "business";
    /** ProfileSchema */
    ProfileSchema: {
      /** Name */
      name?: string;
      /** Profile Picture */
      profile_picture?: string;
      /**
       * Created
       * Format: date-time
       */
      created: string;
      /**
       * Updated
       * Format: date-time
       */
      updated: string;
      /** Email */
      email: string;
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
      subscription_tier: components["schemas"]["SwiftinkSubscriptionTiers"];
    };
    /** CreateUserRequest */
    CreateUserRequest: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Password */
      password: string;
      /** Name */
      name: string;
    };
    /** UpdateProfileRequest */
    UpdateProfileRequest: {
      /** Name */
      name?: string;
      /**
       * Profile Picture
       * Format: uri
       */
      profile_picture?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Status */
  swiftink_api_api_status: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Generate Presigned Url */
  swiftink_api_routers_transcript_transcript_router_generate_presigned_url: {
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["GeneratePresignedResponse"];
        };
      };
      /** @description Payment Required */
      402: {
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
    };
  };
  /**
   * Get Transcripts
   * @description Get all transcripts for the current user
   */
  swiftink_api_routers_transcript_transcript_router_get_transcripts: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TranscriptSchema"][];
        };
      };
    };
  };
  /** Create Transcription */
  swiftink_api_routers_transcript_transcript_router_create_transcription: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTranscriptionRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["TranscriptSchema"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
      /** @description Payment Required */
      402: {
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
    };
  };
  /**
   * Get Transcript Validate
   * @description Get the details of a specific transcript by id
   */
  swiftink_api_routers_transcript_transcript_router_get_transcript_validate: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": boolean;
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get Transcript Details
   * @description Get the details of a specific transcript by id
   */
  swiftink_api_routers_transcript_transcript_router_get_transcript_details: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TranscriptSchema"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update Transcript
   * @description Update a transcript by id
   */
  swiftink_api_routers_transcript_transcript_router_update_transcript: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTranscriptRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TranscriptSchema"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete Transcript
   * @description Delete a transcript by id
   */
  swiftink_api_routers_transcript_transcript_router_delete_transcript: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get Transcript Txt
   * @description Get the text of a transcript and return as a .txt file
   */
  swiftink_api_routers_transcript_transcript_router_get_transcript_txt: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get Transcript Srt
   * @description Get the text of a transcript and return as a .srt file
   */
  swiftink_api_routers_transcript_transcript_router_get_transcript_srt: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get Transcript Vtt
   * @description Get the text of a transcript and return as a .vtt file
   */
  swiftink_api_routers_transcript_transcript_router_get_transcript_vtt: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get Apikeys
   * @description Get all APIKeys for the current user
   */
  swiftink_api_routers_apikey_apikey_router_get_apikeys: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["APIKeySchema"][];
        };
      };
    };
  };
  /**
   * Create Apikey
   * @description Create a new APIKey for the current user
   */
  swiftink_api_routers_apikey_apikey_router_create_apikey: {
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["CreateAPIKeyResponse"];
        };
      };
    };
  };
  /**
   * Get Apikey Details
   * @description Get details of an APIKey by ID
   */
  swiftink_api_routers_apikey_apikey_router_get_apikey_details: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["APIKeySchema"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update Apikey
   * @description Update details of an APIKey by ID, such as name
   */
  swiftink_api_routers_apikey_apikey_router_update_apikey: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAPIKeyRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["APIKeySchema"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete Apikey
   * @description Delete an APIKey by ID
   */
  swiftink_api_routers_apikey_apikey_router_delete_apikey: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Create Checkout Session
   * @description Create a checkout session for the current user
   */
  swiftink_api_routers_stripe_stripe_router_create_checkout_session: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCheckoutSessionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateCheckoutSessionResponse"];
        };
      };
    };
  };
  /**
   * Create Portal Session
   * @description Create a portal session for the current user to manage their billing details
   */
  swiftink_api_routers_stripe_stripe_router_create_portal_session: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreatePortalSessionResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
    };
  };
  /**
   * Me
   * @description Get the current user's profile
   */
  swiftink_api_routers_user_user_router_me: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProfileSchema"];
        };
      };
    };
  };
  /**
   * Update Me
   * @description Update the current user's profile name
   */
  swiftink_api_routers_user_user_router_update_me: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProfileRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProfileSchema"];
        };
      };
    };
  };
  /**
   * Create Me
   * @description Create the user and profile within Supabase
   */
  swiftink_api_routers_user_user_router_create_me: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["ProfileSchema"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
    };
  };
  /**
   * Delete Me
   * @description Delete the current user's profile and cancel all subscriptions
   */
  swiftink_api_routers_user_user_router_delete_me: {
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
    };
  };
}
